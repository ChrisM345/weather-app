(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(354),r=t.n(a),i=t(314),o=t.n(i)()(r());o.push([e.id,"body {\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.nav {\n}\n\nul {\n  list-style: none;\n  margin: 0;\n  padding: 10px;\n}\n\nli {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\nh3 {\n  margin: 0;\n  text-align: center;\n}\n\np {\n  margin: 5px;\n}\n\n.current {\n  border: solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n.forecast-day {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid black;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;AACA;;AAEA;EACE,gBAAgB;EAChB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uCAAuC;AACzC;;AAEA;EACE,aAAa;EACb,qCAAqC;AACvC;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,mBAAmB;AACrB",sourcesContent:["body {\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.nav {\n}\n\nul {\n  list-style: none;\n  margin: 0;\n  padding: 10px;\n}\n\nli {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\nh3 {\n  margin: 0;\n  text-align: center;\n}\n\np {\n  margin: 5px;\n}\n\n.current {\n  border: solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n.forecast-day {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid black;\n}\n"],sourceRoot:""}]);const c=o},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);a&&o[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var i={},o=[],c=0;c<e.length;c++){var s=e[c],d=a.base?s[0]+a.base:s[0],l=i[d]||0,p="".concat(d," ").concat(l);i[d]=l+1;var u=t(p),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var A=r(m,a);a.byIndex=c,n.splice(c,0,{identifier:p,updater:A,references:1})}o.push(p)}return o}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var c=t(i[o]);n[c].references--}for(var s=a(e,r),d=0;d<i.length;d++){var l=t(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},659:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var r=n[a];if(void 0!==r)return r.exports;var i=n[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=[];class n{constructor(e,n,t,a,r,i,o,c,s,d,l,p){this.condition=e,this.icon=n,this.feelslike_f=t,this.gust_mph=a,this.humidity=r,this.last_updated=i,this.precip_in=o,this.temp_f=c,this.uv=s,this.vis_miles=d,this.wind_dir=l,this.wind_mph=p}addCurrentWeatherData(){e.push(this)}}const a=[];class r{constructor(e,n,t,a,r,i,o,c,s,d,l,p,u,m){this.date=e,this.avghumidity=n,this.avgtemp_f=t,this.avgvis_miles=a,this.condition=r,this.icon=i,this.chance_rain=o,this.chance_snow=c,this.maxtemp_f=s,this.maxwind_mph=d,this.mintemp_f=l,this.totalprecip_in=p,this.totalsnow_cm=u,this.uv=m}addForecastWeatherData(){a.push(this)}}const i=document.querySelector(".current"),o=document.querySelector(".forecast");var c=t(72),s=t.n(c),d=t(825),l=t.n(d),p=t(659),u=t.n(p),m=t(56),A=t.n(m),f=t(540),h=t.n(f),v=t(113),y=t.n(v),g=t(208),E={};E.styleTagTransform=y(),E.setAttributes=A(),E.insert=u().bind(null,"head"),E.domAPI=l(),E.insertStyleElement=h(),s()(g.A,E),g.A&&g.A.locals&&g.A.locals;let x="Chicago";const C=document.querySelector(".current-city");async function b(){try{const s=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=bb11d44ee4eb4fbda5504617242603&q=${x}&days=3`);if(!s.ok)throw new Error(s.status);const d=await s.json();t=d.current,e.length=0,new n((c=t).condition.text,c.condition.icon,c.feelslike_f,c.gust_mph,c.humidity,c.last_updated,c.precip_in,c.temp_f,c.uv,c.vis_miles,c.wind_dir,c.wind_mph).addCurrentWeatherData(),function(e){a.length=0;for(let t=0;t<e.forecastday.length;t++)n=e.forecastday[t],new r(n.date,n.day.avghumidity,n.day.avgtemp_f,n.day.avgvis_miles,n.day.condition.text,n.day.condition.icon,n.chance_rain,n.chance_snow,n.maxtemp_f,n.maxwind_mph,n.mintemp_f,n.totalprecip_in,n.totalsnow_cm,n.uv).addForecastWeatherData();var n}(d.forecast),function(){i.innerHTML="";const n=e[0],t=`Current Temp ${n.temp_f}°F`,a=n.last_updated.split(" ")[0],r=n.condition,o=n.icon,c=n.wind_dir,s=n.wind_mph,d=document.createElement("p");d.className="current-temp",d.innerText=t;const l=document.createElement("p");l.className="current-date",l.innerText=a;const p=document.createElement("p");p.className="current-condition",p.innerText=r;const u=document.createElement("img");u.src=o;const m=document.createElement("p");m.className="current-descrition",m.innerText=`Wind ${c} at ${s} mph.`,i.append(d),i.append(l),i.append(p),i.append(u),i.append(m);const A=document.createElement("div");A.className="current-details";const f=n.feelslike_f,h=n.humidity,v=n.uv,y=n.vis_miles,g=document.createElement("p");g.innerText=`Feels like\n${f}°F`;const E=document.createElement("p");E.innerText=`Humidity\n${h}`;const x=document.createElement("p");x.innerText=`UV index\n${v}`;const C=document.createElement("p");C.innerText=`Visibility\n${y} miles`,A.append(g),A.append(E),A.append(x),A.append(C),i.append(A)}(),o.innerHTML="",a.forEach((e=>{const n=document.createElement("div");n.className="forecast-day";const t=e.date,a=e.avghumidity,r=e.avgtemp_f,i=e.avgvis_miles,c=e.condition,s=e.icon,d=document.createElement("p");d.className="forecast-temp",d.innerText=`Average Temp: ${r}`;const l=document.createElement("p");l.className="forecast-date",l.innerText=t;const p=document.createElement("p");p.className="forecast-condition",p.innerText=c;const u=document.createElement("img");u.src=s,n.append(d),n.append(l),n.append(p),n.append(u);const m=document.createElement("div");m.className="forecast-details";const A=document.createElement("p");A.innerText=`Humidity: ${a}`;const f=document.createElement("p");f.innerText=`Visibility: ${i} miles`,m.append(A),m.append(f),n.append(m),o.append(n)}))}catch(e){alert(`Error! You entered ${x}. Please re-enter the city name`)}var t,c}document.querySelector("#city-form").addEventListener("submit",(e=>{e.preventDefault(),x=document.getElementById("city").value,C.innerText=x,b()})),C.innerText=x,b()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNd0MsRUFBZ0IzRyxTQUFTVyxjQUFjLEtBQzdDZ0csRUFBY0gsVUFBWSxxQkFDMUJHLEVBQWNGLFVBQVlyRCxFQUMxQixNQUFNd0QsRUFBWTVHLFNBQVNXLGNBQWMsT0FDekNpRyxFQUFVQyxJQUFNeEQsRUFFaEJvRSxFQUFXVixPQUFPUixHQUNsQmtCLEVBQVdWLE9BQU9MLEdBQ2xCZSxFQUFXVixPQUFPSixHQUNsQmMsRUFBV1YsT0FBT0gsR0FFbEIsTUFBTUksRUFBWWhILFNBQVNXLGNBQWMsT0FDekNxRyxFQUFVUixVQUFZLG1CQUV0QixNQUFNWSxFQUFrQnBILFNBQVNXLGNBQWMsS0FDL0N5RyxFQUFnQlgsVUFBWSxhQUFhckMsSUFDekMsTUFBTWtELEVBQW9CdEgsU0FBU1csY0FBYyxLQUNqRDJHLEVBQWtCYixVQUFZLGVBQWVuQyxVQUU3QzBDLEVBQVVELE9BQU9LLEdBQ2pCSixFQUFVRCxPQUFPTyxHQUNqQkcsRUFBV1YsT0FBT0MsR0FFbEJoQyxFQUFtQitCLE9BQU9VLEVBQVcsR0VsRnZDLENBQUUsTUFBT0MsR0FDUEMsTUFBTSxzQkFBc0J6QyxtQ0FDOUIsQ0plRixJQUFtQ1UsRUF0QkNqSSxDSVFwQyxDQXRCaUJxQyxTQUFTQyxjQUFjLGNBQy9CMkgsaUJBQWlCLFVBQVd0SCxJQUNuQ0EsRUFBRXVILGlCQUNGM0MsRUFBT2xGLFNBQVM4SCxlQUFlLFFBQVFDLE1BQ3ZDNUMsRUFBWXNCLFVBQVl2QixFQUN4QkcsR0FBWSxJQWtCZEYsRUFBWXNCLFVBQVl2QixFQUN4QkcsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9hcGkta2V5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2N1cnJlbnRXZWF0aGVyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2ZvcmVjYXN0V2VhdGhlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9kaXNwbGF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRibHVlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ubmF2IHtcbn1cblxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbmxpIHtcbiAgcGFkZGluZy10b3A6IDVweDtcbiAgcGFkZGluZy1ib3R0b206IDVweDtcbn1cblxuaDMge1xuICBtYXJnaW46IDA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxucCB7XG4gIG1hcmdpbjogNXB4O1xufVxuXG4uY3VycmVudCB7XG4gIGJvcmRlcjogc29saWQgYmxhY2s7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5jdXJyZW50LWRldGFpbHMge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAyMDBweCk7XG59XG5cbi5mb3JlY2FzdCB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG59XG4uZm9yZWNhc3QtZGF5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyOiBzb2xpZCBibGFjaztcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLDJCQUEyQjtFQUMzQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtBQUNyQjs7QUFFQTtBQUNBOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFNBQVM7RUFDVCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsU0FBUztFQUNULGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1Q0FBdUM7QUFDekM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IscUNBQXFDO0FBQ3ZDO0FBQ0E7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5uYXYge1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMTBweDtcXG59XFxuXFxubGkge1xcbiAgcGFkZGluZy10b3A6IDVweDtcXG4gIHBhZGRpbmctYm90dG9tOiA1cHg7XFxufVxcblxcbmgzIHtcXG4gIG1hcmdpbjogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxucCB7XFxuICBtYXJnaW46IDVweDtcXG59XFxuXFxuLmN1cnJlbnQge1xcbiAgYm9yZGVyOiBzb2xpZCBibGFjaztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmN1cnJlbnQtZGV0YWlscyB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMjAwcHgpO1xcbn1cXG5cXG4uZm9yZWNhc3Qge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XFxufVxcbi5mb3JlY2FzdC1kYXkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyOiBzb2xpZCBibGFjaztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImNvbnN0IGFwaUtleSA9IGBiYjExZDQ0ZWU0ZWI0ZmJkYTU1MDQ2MTcyNDI2MDNgO1xuZXhwb3J0IHsgYXBpS2V5IH07XG4iLCJjb25zdCBjdXJyZW50V2VhdGhlckRhdGEgPSBbXTtcblxuY2xhc3MgQ3VycmVudFdlYXRoZXIge1xuICBjb25zdHJ1Y3Rvcihjb25kaXRpb24sIGljb24sIGZlZWxzbGlrZV9mLCBndXN0X21waCwgaHVtaWRpdHksIGxhc3RfdXBkYXRlZCwgcHJlY2lwX2luLCB0ZW1wX2YsIHV2LCB2aXNfbWlsZXMsIHdpbmRfZGlyLCB3aW5kX21waCkge1xuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIHRoaXMuaWNvbiA9IGljb247XG4gICAgdGhpcy5mZWVsc2xpa2VfZiA9IGZlZWxzbGlrZV9mO1xuICAgIHRoaXMuZ3VzdF9tcGggPSBndXN0X21waDtcbiAgICB0aGlzLmh1bWlkaXR5ID0gaHVtaWRpdHk7XG4gICAgdGhpcy5sYXN0X3VwZGF0ZWQgPSBsYXN0X3VwZGF0ZWQ7XG4gICAgdGhpcy5wcmVjaXBfaW4gPSBwcmVjaXBfaW47XG4gICAgdGhpcy50ZW1wX2YgPSB0ZW1wX2Y7XG4gICAgdGhpcy51diA9IHV2O1xuICAgIHRoaXMudmlzX21pbGVzID0gdmlzX21pbGVzO1xuICAgIHRoaXMud2luZF9kaXIgPSB3aW5kX2RpcjtcbiAgICB0aGlzLndpbmRfbXBoID0gd2luZF9tcGg7XG4gIH1cblxuICBhZGRDdXJyZW50V2VhdGhlckRhdGEoKSB7XG4gICAgY3VycmVudFdlYXRoZXJEYXRhLnB1c2godGhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ3VycmVudFdlYXRoZXJPYmplY3QoZGF0YSkge1xuICBjb25zdCB3ZWF0aGVyID0gbmV3IEN1cnJlbnRXZWF0aGVyKFxuICAgIGRhdGEuY29uZGl0aW9uLnRleHQsXG4gICAgZGF0YS5jb25kaXRpb24uaWNvbixcbiAgICBkYXRhLmZlZWxzbGlrZV9mLFxuICAgIGRhdGEuZ3VzdF9tcGgsXG4gICAgZGF0YS5odW1pZGl0eSxcbiAgICBkYXRhLmxhc3RfdXBkYXRlZCxcbiAgICBkYXRhLnByZWNpcF9pbixcbiAgICBkYXRhLnRlbXBfZixcbiAgICBkYXRhLnV2LFxuICAgIGRhdGEudmlzX21pbGVzLFxuICAgIGRhdGEud2luZF9kaXIsXG4gICAgZGF0YS53aW5kX21waFxuICApO1xuICB3ZWF0aGVyLmFkZEN1cnJlbnRXZWF0aGVyRGF0YSgpO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50V2VhdGhlckRhdGEoKSB7XG4gIHJldHVybiBjdXJyZW50V2VhdGhlckRhdGE7XG59XG5cbmZ1bmN0aW9uIEpTT050b0N1cnJlbnRXZWF0aGVyQ2xhc3MoY3VycmVudERhdGEpIHtcbiAgY3VycmVudFdlYXRoZXJEYXRhLmxlbmd0aCA9IDA7XG4gIGNyZWF0ZUN1cnJlbnRXZWF0aGVyT2JqZWN0KGN1cnJlbnREYXRhKTtcbn1cblxuZXhwb3J0IHsgSlNPTnRvQ3VycmVudFdlYXRoZXJDbGFzcywgZ2V0Q3VycmVudFdlYXRoZXJEYXRhIH07XG4iLCJjb25zdCBmb3JlY2FzdFdlYXRoZXJEYXRhID0gW107XG5cbmNsYXNzIEZvcmVjYXN0V2VhdGhlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGRhdGUsXG4gICAgYXZnaHVtaWRpdHksXG4gICAgYXZndGVtcF9mLFxuICAgIGF2Z3Zpc19taWxlcyxcbiAgICBjb25kaXRpb24sXG4gICAgaWNvbixcbiAgICBjaGFuY2VfcmFpbixcbiAgICBjaGFuY2Vfc25vdyxcbiAgICBtYXh0ZW1wX2YsXG4gICAgbWF4d2luZF9tcGgsXG4gICAgbWludGVtcF9mLFxuICAgIHRvdGFscHJlY2lwX2luLFxuICAgIHRvdGFsc25vd19jbSxcbiAgICB1dlxuICApIHtcbiAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgIHRoaXMuYXZnaHVtaWRpdHkgPSBhdmdodW1pZGl0eTtcbiAgICB0aGlzLmF2Z3RlbXBfZiA9IGF2Z3RlbXBfZjtcbiAgICB0aGlzLmF2Z3Zpc19taWxlcyA9IGF2Z3Zpc19taWxlcztcbiAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLmljb24gPSBpY29uO1xuICAgIHRoaXMuY2hhbmNlX3JhaW4gPSBjaGFuY2VfcmFpbjtcbiAgICB0aGlzLmNoYW5jZV9zbm93ID0gY2hhbmNlX3Nub3c7XG4gICAgdGhpcy5tYXh0ZW1wX2YgPSBtYXh0ZW1wX2Y7XG4gICAgdGhpcy5tYXh3aW5kX21waCA9IG1heHdpbmRfbXBoO1xuICAgIHRoaXMubWludGVtcF9mID0gbWludGVtcF9mO1xuICAgIHRoaXMudG90YWxwcmVjaXBfaW4gPSB0b3RhbHByZWNpcF9pbjtcbiAgICB0aGlzLnRvdGFsc25vd19jbSA9IHRvdGFsc25vd19jbTtcbiAgICB0aGlzLnV2ID0gdXY7XG4gIH1cblxuICBhZGRGb3JlY2FzdFdlYXRoZXJEYXRhKCkge1xuICAgIGZvcmVjYXN0V2VhdGhlckRhdGEucHVzaCh0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGb3JlY2FzdFdlYXRoZXJPYmplY3QoZGF0YSkge1xuICBjb25zdCB3ZWF0aGVyID0gbmV3IEZvcmVjYXN0V2VhdGhlcihcbiAgICBkYXRhLmRhdGUsXG4gICAgZGF0YS5kYXkuYXZnaHVtaWRpdHksXG4gICAgZGF0YS5kYXkuYXZndGVtcF9mLFxuICAgIGRhdGEuZGF5LmF2Z3Zpc19taWxlcyxcbiAgICBkYXRhLmRheS5jb25kaXRpb24udGV4dCxcbiAgICBkYXRhLmRheS5jb25kaXRpb24uaWNvbixcbiAgICBkYXRhLmNoYW5jZV9yYWluLFxuICAgIGRhdGEuY2hhbmNlX3Nub3csXG4gICAgZGF0YS5tYXh0ZW1wX2YsXG4gICAgZGF0YS5tYXh3aW5kX21waCxcbiAgICBkYXRhLm1pbnRlbXBfZixcbiAgICBkYXRhLnRvdGFscHJlY2lwX2luLFxuICAgIGRhdGEudG90YWxzbm93X2NtLFxuICAgIGRhdGEudXZcbiAgKTtcbiAgd2VhdGhlci5hZGRGb3JlY2FzdFdlYXRoZXJEYXRhKCk7XG59XG5cbmZ1bmN0aW9uIGdldEZvcmVjYXN0V2VhdGhlckRhdGEoKSB7XG4gIHJldHVybiBmb3JlY2FzdFdlYXRoZXJEYXRhO1xufVxuXG5mdW5jdGlvbiBKU09OdG9Gb3JlY2FzdFdlYXRoZXJDbGFzcyhmb3JlY2FzdERhdGEpIHtcbiAgZm9yZWNhc3RXZWF0aGVyRGF0YS5sZW5ndGggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcmVjYXN0RGF0YS5mb3JlY2FzdGRheS5sZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUZvcmVjYXN0V2VhdGhlck9iamVjdChmb3JlY2FzdERhdGEuZm9yZWNhc3RkYXlbaV0pO1xuICB9XG4gIC8vICAgY3JlYXRlRm9yZWNhc3RXZWF0aGVyT2JqZWN0KGZvcmVjYXN0RGF0YSk7XG59XG5cbmV4cG9ydCB7IEpTT050b0ZvcmVjYXN0V2VhdGhlckNsYXNzLCBnZXRGb3JlY2FzdFdlYXRoZXJEYXRhIH07XG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50V2VhdGhlckRhdGEgfSBmcm9tIFwiLi9jdXJyZW50V2VhdGhlclwiO1xuaW1wb3J0IHsgZ2V0Rm9yZWNhc3RXZWF0aGVyRGF0YSB9IGZyb20gXCIuL2ZvcmVjYXN0V2VhdGhlclwiO1xuXG5jb25zdCBjdXJyZW50V2VhdGhlckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3VycmVudFwiKTtcbmNvbnN0IGZvcmVjYXN0V2VhdGhlckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9yZWNhc3RcIik7XG5cbmZ1bmN0aW9uIGRpc3BsYXlDdXJyZW50V2VhdGhlcigpIHtcbiAgY3VycmVudFdlYXRoZXJEaXYuaW5uZXJIVE1MID0gXCJcIjtcbiAgY29uc3QgZGF0YSA9IGdldEN1cnJlbnRXZWF0aGVyRGF0YSgpWzBdO1xuICBjb25zdCB0ZW1wID0gYEN1cnJlbnQgVGVtcCAke2RhdGEudGVtcF9mfVxcdTAwQjBGYDtcbiAgY29uc3QgZGF0ZSA9IGRhdGEubGFzdF91cGRhdGVkLnNwbGl0KFwiIFwiKVswXTtcbiAgY29uc3QgY29uZGl0aW9uID0gZGF0YS5jb25kaXRpb247XG4gIGNvbnN0IGljb24gPSBkYXRhLmljb247XG4gIC8vIGNvbnN0IHByZWNpcF9pbiA9IGRhdGEucHJlY2lwX2luO1xuXG4gIGNvbnN0IHdpbmRfZGlyID0gZGF0YS53aW5kX2RpcjtcbiAgY29uc3Qgd2luZF9tcGggPSBkYXRhLndpbmRfbXBoO1xuXG4gIGNvbnN0IHRlbXBMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIHRlbXBMaW5lLmNsYXNzTmFtZSA9IFwiY3VycmVudC10ZW1wXCI7XG4gIHRlbXBMaW5lLmlubmVyVGV4dCA9IHRlbXA7XG5cbiAgY29uc3QgZGF0ZUxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgZGF0ZUxpbmUuY2xhc3NOYW1lID0gXCJjdXJyZW50LWRhdGVcIjtcbiAgZGF0ZUxpbmUuaW5uZXJUZXh0ID0gZGF0ZTtcblxuICBjb25zdCBjb25kaXRpb25MaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbmRpdGlvbkxpbmUuY2xhc3NOYW1lID0gXCJjdXJyZW50LWNvbmRpdGlvblwiO1xuICBjb25kaXRpb25MaW5lLmlubmVyVGV4dCA9IGNvbmRpdGlvbjtcbiAgY29uc3QgaWNvbkltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgaWNvbkltYWdlLnNyYyA9IGljb247XG5cbiAgY29uc3QgZGVzY3JpcHRpb25MaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGRlc2NyaXB0aW9uTGluZS5jbGFzc05hbWUgPSBcImN1cnJlbnQtZGVzY3JpdGlvblwiO1xuICBkZXNjcmlwdGlvbkxpbmUuaW5uZXJUZXh0ID0gYFdpbmQgJHt3aW5kX2Rpcn0gYXQgJHt3aW5kX21waH0gbXBoLmA7XG5cbiAgY3VycmVudFdlYXRoZXJEaXYuYXBwZW5kKHRlbXBMaW5lKTtcbiAgY3VycmVudFdlYXRoZXJEaXYuYXBwZW5kKGRhdGVMaW5lKTtcbiAgY3VycmVudFdlYXRoZXJEaXYuYXBwZW5kKGNvbmRpdGlvbkxpbmUpO1xuICBjdXJyZW50V2VhdGhlckRpdi5hcHBlbmQoaWNvbkltYWdlKTtcbiAgY3VycmVudFdlYXRoZXJEaXYuYXBwZW5kKGRlc2NyaXB0aW9uTGluZSk7XG5cbiAgY29uc3QgZGV0YWlsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGV0YWlsRGl2LmNsYXNzTmFtZSA9IFwiY3VycmVudC1kZXRhaWxzXCI7XG5cbiAgY29uc3QgZmVlbHNMaWtlID0gZGF0YS5mZWVsc2xpa2VfZjtcbiAgY29uc3QgaHVtaWRpdHkgPSBkYXRhLmh1bWlkaXR5O1xuICBjb25zdCB1diA9IGRhdGEudXY7XG4gIGNvbnN0IHZpc2liaWxpdHkgPSBkYXRhLnZpc19taWxlcztcblxuICBjb25zdCBmZWVsc0xpa2VTZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGZlZWxzTGlrZVNlY3Rpb24uaW5uZXJUZXh0ID0gYEZlZWxzIGxpa2VcXG4ke2ZlZWxzTGlrZX1cXHUwMEIwRmA7XG4gIGNvbnN0IGh1bWlkaXR5U2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBodW1pZGl0eVNlY3Rpb24uaW5uZXJUZXh0ID0gYEh1bWlkaXR5XFxuJHtodW1pZGl0eX1gO1xuICBjb25zdCB1dlNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgdXZTZWN0aW9uLmlubmVyVGV4dCA9IGBVViBpbmRleFxcbiR7dXZ9YDtcbiAgY29uc3QgdmlzaWJpbGl0eVNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgdmlzaWJpbGl0eVNlY3Rpb24uaW5uZXJUZXh0ID0gYFZpc2liaWxpdHlcXG4ke3Zpc2liaWxpdHl9IG1pbGVzYDtcblxuICBkZXRhaWxEaXYuYXBwZW5kKGZlZWxzTGlrZVNlY3Rpb24pO1xuICBkZXRhaWxEaXYuYXBwZW5kKGh1bWlkaXR5U2VjdGlvbik7XG4gIGRldGFpbERpdi5hcHBlbmQodXZTZWN0aW9uKTtcbiAgZGV0YWlsRGl2LmFwcGVuZCh2aXNpYmlsaXR5U2VjdGlvbik7XG4gIGN1cnJlbnRXZWF0aGVyRGl2LmFwcGVuZChkZXRhaWxEaXYpO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5Rm9yZWNhc3RXZWF0aGVyKCkge1xuICBmb3JlY2FzdFdlYXRoZXJEaXYuaW5uZXJIVE1MID0gXCJcIjtcbiAgY29uc3QgZGF0YSA9IGdldEZvcmVjYXN0V2VhdGhlckRhdGEoKTtcbiAgZGF0YS5mb3JFYWNoKCh3ZWF0aGVyRGF0YSkgPT4ge1xuICAgIGNvbnN0IGRheURhdGFEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRheURhdGFEaXYuY2xhc3NOYW1lID0gXCJmb3JlY2FzdC1kYXlcIjtcbiAgICBjb25zdCBkYXRlID0gd2VhdGhlckRhdGEuZGF0ZTtcbiAgICBjb25zdCBhdmdodW1pZGl0eSA9IHdlYXRoZXJEYXRhLmF2Z2h1bWlkaXR5O1xuICAgIGNvbnN0IGF2Z3RlbXBfZiA9IHdlYXRoZXJEYXRhLmF2Z3RlbXBfZjtcbiAgICBjb25zdCBhdmd2aXNfbWlsZXMgPSB3ZWF0aGVyRGF0YS5hdmd2aXNfbWlsZXM7XG4gICAgY29uc3QgY29uZGl0aW9uID0gd2VhdGhlckRhdGEuY29uZGl0aW9uO1xuICAgIGNvbnN0IGljb24gPSB3ZWF0aGVyRGF0YS5pY29uO1xuXG4gICAgY29uc3QgdGVtcExpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICB0ZW1wTGluZS5jbGFzc05hbWUgPSBcImZvcmVjYXN0LXRlbXBcIjtcbiAgICB0ZW1wTGluZS5pbm5lclRleHQgPSBgQXZlcmFnZSBUZW1wOiAke2F2Z3RlbXBfZn1gO1xuXG4gICAgY29uc3QgZGF0ZUxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBkYXRlTGluZS5jbGFzc05hbWUgPSBcImZvcmVjYXN0LWRhdGVcIjtcbiAgICBkYXRlTGluZS5pbm5lclRleHQgPSBkYXRlO1xuXG4gICAgY29uc3QgY29uZGl0aW9uTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGNvbmRpdGlvbkxpbmUuY2xhc3NOYW1lID0gXCJmb3JlY2FzdC1jb25kaXRpb25cIjtcbiAgICBjb25kaXRpb25MaW5lLmlubmVyVGV4dCA9IGNvbmRpdGlvbjtcbiAgICBjb25zdCBpY29uSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIGljb25JbWFnZS5zcmMgPSBpY29uO1xuXG4gICAgZGF5RGF0YURpdi5hcHBlbmQodGVtcExpbmUpO1xuICAgIGRheURhdGFEaXYuYXBwZW5kKGRhdGVMaW5lKTtcbiAgICBkYXlEYXRhRGl2LmFwcGVuZChjb25kaXRpb25MaW5lKTtcbiAgICBkYXlEYXRhRGl2LmFwcGVuZChpY29uSW1hZ2UpO1xuXG4gICAgY29uc3QgZGV0YWlsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkZXRhaWxEaXYuY2xhc3NOYW1lID0gXCJmb3JlY2FzdC1kZXRhaWxzXCI7XG5cbiAgICBjb25zdCBodW1pZGl0eVNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBodW1pZGl0eVNlY3Rpb24uaW5uZXJUZXh0ID0gYEh1bWlkaXR5OiAke2F2Z2h1bWlkaXR5fWA7XG4gICAgY29uc3QgdmlzaWJpbGl0eVNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICB2aXNpYmlsaXR5U2VjdGlvbi5pbm5lclRleHQgPSBgVmlzaWJpbGl0eTogJHthdmd2aXNfbWlsZXN9IG1pbGVzYDtcblxuICAgIGRldGFpbERpdi5hcHBlbmQoaHVtaWRpdHlTZWN0aW9uKTtcbiAgICBkZXRhaWxEaXYuYXBwZW5kKHZpc2liaWxpdHlTZWN0aW9uKTtcbiAgICBkYXlEYXRhRGl2LmFwcGVuZChkZXRhaWxEaXYpO1xuXG4gICAgZm9yZWNhc3RXZWF0aGVyRGl2LmFwcGVuZChkYXlEYXRhRGl2KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGRpc3BsYXlDdXJyZW50V2VhdGhlciwgZGlzcGxheUZvcmVjYXN0V2VhdGhlciB9O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYXBpS2V5IH0gZnJvbSBcIi4vYXBpLWtleVwiO1xuaW1wb3J0IHsgSlNPTnRvQ3VycmVudFdlYXRoZXJDbGFzcyB9IGZyb20gXCIuL2N1cnJlbnRXZWF0aGVyXCI7XG5pbXBvcnQgeyBKU09OdG9Gb3JlY2FzdFdlYXRoZXJDbGFzcyB9IGZyb20gXCIuL2ZvcmVjYXN0V2VhdGhlclwiO1xuaW1wb3J0IHsgZGlzcGxheUN1cnJlbnRXZWF0aGVyIH0gZnJvbSBcIi4vZGlzcGxheVwiO1xuaW1wb3J0IHsgZGlzcGxheUZvcmVjYXN0V2VhdGhlciB9IGZyb20gXCIuL2Rpc3BsYXlcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmxldCBjaXR5ID0gXCJDaGljYWdvXCI7XG5jb25zdCBjdXJyZW50Q2l0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3VycmVudC1jaXR5XCIpO1xuY29uc3QgY2l0eUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NpdHktZm9ybVwiKTtcbmNpdHlGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBjaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaXR5XCIpLnZhbHVlO1xuICBjdXJyZW50Q2l0eS5pbm5lclRleHQgPSBjaXR5O1xuICBnZXRXZWF0aGVyKCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0V2VhdGhlcigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9mb3JlY2FzdC5qc29uP2tleT0ke2FwaUtleX0mcT0ke2NpdHl9JmRheXM9M2ApO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgIH1cbiAgICBjb25zdCB3ZWF0aGVyRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBKU09OdG9DdXJyZW50V2VhdGhlckNsYXNzKHdlYXRoZXJEYXRhLmN1cnJlbnQpO1xuICAgIEpTT050b0ZvcmVjYXN0V2VhdGhlckNsYXNzKHdlYXRoZXJEYXRhLmZvcmVjYXN0KTtcbiAgICBkaXNwbGF5Q3VycmVudFdlYXRoZXIoKTtcbiAgICBkaXNwbGF5Rm9yZWNhc3RXZWF0aGVyKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYWxlcnQoYEVycm9yISBZb3UgZW50ZXJlZCAke2NpdHl9LiBQbGVhc2UgcmUtZW50ZXIgdGhlIGNpdHkgbmFtZWApO1xuICB9XG59XG5jdXJyZW50Q2l0eS5pbm5lclRleHQgPSBjaXR5O1xuZ2V0V2VhdGhlcigpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImN1cnJlbnRXZWF0aGVyRGF0YSIsIkN1cnJlbnRXZWF0aGVyIiwiY29uc3RydWN0b3IiLCJjb25kaXRpb24iLCJpY29uIiwiZmVlbHNsaWtlX2YiLCJndXN0X21waCIsImh1bWlkaXR5IiwibGFzdF91cGRhdGVkIiwicHJlY2lwX2luIiwidGVtcF9mIiwidXYiLCJ2aXNfbWlsZXMiLCJ3aW5kX2RpciIsIndpbmRfbXBoIiwiYWRkQ3VycmVudFdlYXRoZXJEYXRhIiwiZm9yZWNhc3RXZWF0aGVyRGF0YSIsIkZvcmVjYXN0V2VhdGhlciIsImRhdGUiLCJhdmdodW1pZGl0eSIsImF2Z3RlbXBfZiIsImF2Z3Zpc19taWxlcyIsImNoYW5jZV9yYWluIiwiY2hhbmNlX3Nub3ciLCJtYXh0ZW1wX2YiLCJtYXh3aW5kX21waCIsIm1pbnRlbXBfZiIsInRvdGFscHJlY2lwX2luIiwidG90YWxzbm93X2NtIiwiYWRkRm9yZWNhc3RXZWF0aGVyRGF0YSIsImN1cnJlbnRXZWF0aGVyRGl2IiwiZm9yZWNhc3RXZWF0aGVyRGl2IiwibG9jYWxzIiwiY2l0eSIsImN1cnJlbnRDaXR5IiwiYXN5bmMiLCJnZXRXZWF0aGVyIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwic3RhdHVzIiwid2VhdGhlckRhdGEiLCJqc29uIiwiY3VycmVudERhdGEiLCJjdXJyZW50IiwidGV4dCIsImZvcmVjYXN0RGF0YSIsImZvcmVjYXN0ZGF5IiwiZGF5IiwiSlNPTnRvRm9yZWNhc3RXZWF0aGVyQ2xhc3MiLCJmb3JlY2FzdCIsImlubmVySFRNTCIsInRlbXAiLCJzcGxpdCIsInRlbXBMaW5lIiwiY2xhc3NOYW1lIiwiaW5uZXJUZXh0IiwiZGF0ZUxpbmUiLCJjb25kaXRpb25MaW5lIiwiaWNvbkltYWdlIiwic3JjIiwiZGVzY3JpcHRpb25MaW5lIiwiYXBwZW5kIiwiZGV0YWlsRGl2IiwiZmVlbHNMaWtlIiwidmlzaWJpbGl0eSIsImZlZWxzTGlrZVNlY3Rpb24iLCJodW1pZGl0eVNlY3Rpb24iLCJ1dlNlY3Rpb24iLCJ2aXNpYmlsaXR5U2VjdGlvbiIsImRpc3BsYXlDdXJyZW50V2VhdGhlciIsImZvckVhY2giLCJkYXlEYXRhRGl2IiwiZXJyb3IiLCJhbGVydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9