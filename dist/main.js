(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>c});var r=t(354),a=t.n(r),i=t(314),o=t.n(i)()(a());o.push([e.id,"body {\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nul {\n  list-style: none;\n  margin: 0;\n  padding: 10px;\n}\n\nli {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\nh3 {\n  margin: 0;\n  text-align: center;\n}\n\np {\n  margin: 5px;\n  text-align: center;\n}\n\n.current {\n  border: solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n.forecast-day {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid black;\n}\n\n.forecast-day:nth-child(2) {\n  border-left: 0;\n  border-right: 0;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uCAAuC;AACzC;;AAEA;EACE,aAAa;EACb,qCAAqC;AACvC;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;AACjB",sourcesContent:["body {\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nul {\n  list-style: none;\n  margin: 0;\n  padding: 10px;\n}\n\nli {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\nh3 {\n  margin: 0;\n  text-align: center;\n}\n\np {\n  margin: 5px;\n  text-align: center;\n}\n\n.current {\n  border: solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n.forecast-day {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid black;\n}\n\n.forecast-day:nth-child(2) {\n  border-left: 0;\n  border-right: 0;\n}\n"],sourceRoot:""}]);const c=o},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&o[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=i[d]||0,p="".concat(d," ").concat(l);i[d]=l+1;var u=t(p),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var A=a(m,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:A,references:1})}o.push(p)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var c=t(i[o]);n[c].references--}for(var s=r(e,a),d=0;d<i.length;d++){var l=t(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=[];class n{constructor(e,n,t,r,a,i,o,c,s,d,l,p){this.condition=e,this.icon=n,this.feelslike_f=t,this.gust_mph=r,this.humidity=a,this.last_updated=i,this.precip_in=o,this.temp_f=c,this.uv=s,this.vis_miles=d,this.wind_dir=l,this.wind_mph=p}addCurrentWeatherData(){e.push(this)}}const r=[];class a{constructor(e,n,t,r,a,i,o,c,s,d,l,p,u,m){this.date=e,this.avghumidity=n,this.avgtemp_f=t,this.avgvis_miles=r,this.condition=a,this.icon=i,this.chance_rain=o,this.chance_snow=c,this.maxtemp_f=s,this.maxwind_mph=d,this.mintemp_f=l,this.totalprecip_in=p,this.totalsnow_cm=u,this.uv=m}addForecastWeatherData(){r.push(this)}}const i=document.querySelector(".current"),o=document.querySelector(".forecast");var c=t(72),s=t.n(c),d=t(825),l=t.n(d),p=t(659),u=t.n(p),m=t(56),A=t.n(m),f=t(540),h=t.n(f),v=t(113),y=t.n(v),g=t(208),E={};E.styleTagTransform=y(),E.setAttributes=A(),E.insert=u().bind(null,"head"),E.domAPI=l(),E.insertStyleElement=h(),s()(g.A,E),g.A&&g.A.locals&&g.A.locals;let x="Chicago";const C=document.querySelector(".current-city");async function b(){try{const s=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=bb11d44ee4eb4fbda5504617242603&q=${x}&days=3`);if(!s.ok)throw new Error(s.status);const d=await s.json();t=d.current,e.length=0,new n((c=t).condition.text,c.condition.icon,c.feelslike_f,c.gust_mph,c.humidity,c.last_updated,c.precip_in,c.temp_f,c.uv,c.vis_miles,c.wind_dir,c.wind_mph).addCurrentWeatherData(),function(e){r.length=0;for(let t=0;t<e.forecastday.length;t++)n=e.forecastday[t],new a(n.date,n.day.avghumidity,n.day.avgtemp_f,n.day.avgvis_miles,n.day.condition.text,n.day.condition.icon,n.chance_rain,n.chance_snow,n.maxtemp_f,n.maxwind_mph,n.mintemp_f,n.totalprecip_in,n.totalsnow_cm,n.uv).addForecastWeatherData();var n}(d.forecast),function(){i.innerHTML="";const n=e[0],t=`Current Temp ${n.temp_f}°F`,r=n.last_updated.split(" ")[0],a=n.condition,o=n.icon,c=n.wind_dir,s=n.wind_mph,d=document.createElement("p");d.className="current-temp",d.innerText=t;const l=document.createElement("p");l.className="current-date",l.innerText=r;const p=document.createElement("p");p.className="current-condition",p.innerText=a;const u=document.createElement("img");u.src=o;const m=document.createElement("p");m.className="current-descrition",m.innerText=`Wind ${c} at ${s} mph.`,i.append(d),i.append(l),i.append(p),i.append(u),i.append(m);const A=document.createElement("div");A.className="current-details";const f=n.feelslike_f,h=n.humidity,v=n.uv,y=n.vis_miles,g=document.createElement("p");g.innerText=`Feels like\n${f}°F`;const E=document.createElement("p");E.innerText=`Humidity\n${h}`;const x=document.createElement("p");x.innerText=`UV index\n${v}`;const C=document.createElement("p");C.innerText=`Visibility\n${y} miles`,A.append(g),A.append(E),A.append(x),A.append(C),i.append(A)}(),o.innerHTML="",r.forEach((e=>{const n=document.createElement("div");n.className="forecast-day";const t=e.date,r=e.avghumidity,a=e.avgtemp_f,i=e.avgvis_miles,c=e.condition,s=e.icon,d=document.createElement("p");d.className="forecast-temp",d.innerText=`Average Temp: ${a}`;const l=document.createElement("p");l.className="forecast-date",l.innerText=t;const p=document.createElement("p");p.className="forecast-condition",p.innerText=c;const u=document.createElement("img");u.src=s,n.append(d),n.append(l),n.append(p),n.append(u);const m=document.createElement("div");m.className="forecast-details";const A=document.createElement("p");A.innerText=`Humidity: ${r}`;const f=document.createElement("p");f.innerText=`Visibility: ${i} miles`,m.append(A),m.append(f),n.append(m),o.append(n)}))}catch(e){alert(`Error! You entered ${x}. Please re-enter the city name`)}var t,c}document.querySelector("#city-form").addEventListener("submit",(e=>{e.preventDefault(),x=document.getElementById("city").value,C.innerText=x,b()})),C.innerText=x,b()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,