(()=>{"use strict";const t=[];class i{constructor(t,i,s,e,a,o,h,c,n,_,m,r,p,d,l,f,g,u){this.condition=t,this.icon=i,this.feelslike_c=s,this.feelslike_f=e,this.gust_kph=a,this.gust_mph=o,this.humidity=h,this.last_updated=c,this.precip_in=n,this.precip_mm=_,this.temp_c=m,this.temp_f=r,this.uv=p,this.vis_km=d,this.vis_miles=l,this.wind_dir=f,this.wind_kph=g,this.wind_mph=u}addCurrentWeatherData(){t.push(this),console.log("weatherDataArray"),console.log(t)}}const s=[];class e{constructor(t,i,s,e,a,o,h,c,n,_,m,r,p,d,l,f,g,u,v,w){this.date=t,this.avghumidity=i,this.avgtemp_c=s,this.avgtemp_f=e,this.avgvis_km=a,this.avgvis_miles=o,this.condition=h,this.icon=c,this.chance_rain=n,this.chance_snow=_,this.maxtemp_c=m,this.maxtemp_f=r,this.maxwind_kph=p,this.maxwind_mph=d,this.mintemp_c=l,this.mintemp_f=f,this.totalprecip_in=g,this.totalprecip_mm=u,this.totalsnow_cm=v,this.uv=w}addForecastWeatherData(){s.push(this),console.log("forecastWeatherDataArray"),console.log(s)}}!async function(){try{const a=await fetch("https://api.weatherapi.com/v1/forecast.json?key=bb11d44ee4eb4fbda5504617242603&q=Chicago&days=3");if(!a.ok)throw new Error(a.status);const o=await a.json();t=o.current,new i((s=t).condition.text,s.condition.icon,s.feelslike_c,s.feelslike_f,s.gust_kph,s.gust_mph,s.humidity,s.last_updated,s.precip_in,s.precip_mm,s.temp_c,s.temp_f,s.uv,s.vis_km,s.vis_miles,s.wind_dir,s.wind_kph,s.wind_mph).addCurrentWeatherData(),console.log("here"),function(t){console.log("FORECAST"),console.log(t.forecastday[0]);for(let s=0;s<t.forecastday.length;s++)i=t.forecastday[s],new e(i.date,i.day.avghumidity,i.day.avgtemp_c,i.day.avgtemp_f,i.day.avgvis_km,i.day.avgvis_miles,i.day.condition.text,i.day.condition.icon,i.chance_rain,i.chance_snow,i.maxtemp_c,i.maxtemp_f,i.maxwind_kph,i.maxwind_mph,i.mintemp_c,i.mintemp_f,i.totalprecip_in,i.totalprecip_mm,i.totalsnow_cm,i.uv).addForecastWeatherData(),console.log("here");var i}(o.forecast)}catch(t){console.log(t)}var t,s}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,