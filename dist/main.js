(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".current-details {\n  display: grid;\n  border: solid purple;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast-day {\n  border: solid green;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,oBAAoB;EACpB,uCAAuC;AACzC;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:[".current-details {\n  display: grid;\n  border: solid purple;\n  grid-template-columns: repeat(4, 200px);\n}\n\n.forecast-day {\n  border: solid green;\n}\n"],sourceRoot:""}]);const c=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var p=[].concat(e[d]);r&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),t.push(p))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],p=o[d]||0,u="".concat(d," ").concat(p);o[d]=p+1;var l=n(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)t[l].references++,t[l].updater(m);else{var f=a(m,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var s=r(e,a),d=0;d<o.length;d++){var p=n(o[d]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=s}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=[];class t{constructor(e,t,n,r,a,o,i,c,s,d,p,u){this.condition=e,this.icon=t,this.feelslike_f=n,this.gust_mph=r,this.humidity=a,this.last_updated=o,this.precip_in=i,this.temp_f=c,this.uv=s,this.vis_miles=d,this.wind_dir=p,this.wind_mph=u}addCurrentWeatherData(){e.push(this)}}const r=[];class a{constructor(e,t,n,r,a,o,i,c,s,d,p,u,l,m){this.date=e,this.avghumidity=t,this.avgtemp_f=n,this.avgvis_miles=r,this.condition=a,this.icon=o,this.chance_rain=i,this.chance_snow=c,this.maxtemp_f=s,this.maxwind_mph=d,this.mintemp_f=p,this.totalprecip_in=u,this.totalsnow_cm=l,this.uv=m}addForecastWeatherData(){r.push(this)}}const o=document.querySelector(".current"),i=document.querySelector(".forecast");var c=n(72),s=n.n(c),d=n(825),p=n.n(d),u=n(659),l=n.n(u),m=n(56),f=n.n(m),h=n(540),v=n.n(h),y=n(113),g=n.n(y),_=n(208),x={};x.styleTagTransform=g(),x.setAttributes=f(),x.insert=l().bind(null,"head"),x.domAPI=p(),x.insertStyleElement=v(),s()(_.A,x),_.A&&_.A.locals&&_.A.locals,async function(){try{const s=await fetch("https://api.weatherapi.com/v1/forecast.json?key=bb11d44ee4eb4fbda5504617242603&q=Chicago&days=3");if(!s.ok)throw new Error(s.status);const d=await s.json();n=d.current,new t((c=n).condition.text,c.condition.icon,c.feelslike_f,c.gust_mph,c.humidity,c.last_updated,c.precip_in,c.temp_f,c.uv,c.vis_miles,c.wind_dir,c.wind_mph).addCurrentWeatherData(),function(e){for(let n=0;n<e.forecastday.length;n++)t=e.forecastday[n],new a(t.date,t.day.avghumidity,t.day.avgtemp_f,t.day.avgvis_miles,t.day.condition.text,t.day.condition.icon,t.chance_rain,t.chance_snow,t.maxtemp_f,t.maxwind_mph,t.mintemp_f,t.totalprecip_in,t.totalsnow_cm,t.uv).addForecastWeatherData();var t}(d.forecast),function(){const t=e[0],n=`Current Temp ${t.temp_f}°F`,r=t.last_updated.split(" ")[0],a=t.condition,i=t.icon,c=t.wind_dir,s=t.wind_mph,d=document.createElement("p");d.className="current-temp",d.innerText=n;const p=document.createElement("p");p.className="current-date",p.innerText=r;const u=document.createElement("p");u.className="current-condition",u.innerText=a;const l=document.createElement("img");l.src=i;const m=document.createElement("p");m.className="current-descrition",m.innerText=`Wind ${c} at ${s} mph.`,o.append(d),o.append(p),o.append(u),o.append(l),o.append(m);const f=document.createElement("div");f.className="current-details";const h=t.feelslike_f,v=t.humidity,y=t.uv,g=t.vis_miles,_=document.createElement("p");_.innerText=`Feels like\n${h}°F`;const x=document.createElement("p");x.innerText=`Humidity\n${v}`;const A=document.createElement("p");A.innerText=`UV index\n${y}`;const E=document.createElement("p");E.innerText=`Visibility\n${g} miles`,f.append(_),f.append(x),f.append(A),f.append(E),o.append(f)}(),function(){const e=r;console.log(e),e.forEach((e=>{const t=document.createElement("div");t.className="forecast-day",console.log(e);const n=e.date,r=e.avghumidity,a=e.avgtemp_f,o=e.avgvis_miles,c=e.condition,s=e.icon,d=document.createElement("p");d.className="forecast-temp",d.innerText=a;const p=document.createElement("p");p.className="forecast-date",p.innerText=n;const u=document.createElement("p");u.className="forecast-condition",u.innerText=c;const l=document.createElement("img");l.src=s,t.append(d),t.append(p),t.append(u),t.append(l);const m=document.createElement("div");m.className="forecast-details";const f=document.createElement("p");f.innerText=`Humidity\n${r}`;const h=document.createElement("p");h.innerText=`Visibility\n${o} miles`,m.append(f),m.append(h),t.append(m),i.append(t)}))}()}catch(e){console.log(e)}var n,c}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,