(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),i=n(314),o=n.n(i)()(a());o.push([e.id,".current-details {\n  display: grid;\n  border: solid purple;\n  grid-template-columns: repeat(4, 200px);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,oBAAoB;EACpB,uCAAuC;AACzC",sourcesContent:[".current-details {\n  display: grid;\n  border: solid purple;\n  grid-template-columns: repeat(4, 200px);\n}\n"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var p=0;p<e.length;p++){var d=[].concat(e[p]);r&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],p=r.base?c[0]+r.base:c[0],d=i[p]||0,u="".concat(p," ").concat(d);i[p]=d+1;var l=n(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)t[l].references++,t[l].updater(m);else{var f=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var c=r(e,a),p=0;p<i.length;p++){var d=n(i[p]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=document.querySelector(".current"),t=[];class r{constructor(e,t,n,r,a,i,o,s,c,p,d,u){this.condition=e,this.icon=t,this.feelslike_f=n,this.gust_mph=r,this.humidity=a,this.last_updated=i,this.precip_in=o,this.temp_f=s,this.uv=c,this.vis_miles=p,this.wind_dir=d,this.wind_mph=u}addCurrentWeatherData(){t.push(this)}}const a=[];class i{constructor(e,t,n,r,a,i,o,s,c,p,d,u,l,m){this.date=e,this.avghumidity=t,this.avgtemp_f=n,this.avgvis_miles=r,this.condition=a,this.icon=i,this.chance_rain=o,this.chance_snow=s,this.maxtemp_f=c,this.maxwind_mph=p,this.mintemp_f=d,this.totalprecip_in=u,this.totalsnow_cm=l,this.uv=m}addForecastWeatherData(){a.push(this)}}var o=n(72),s=n.n(o),c=n(825),p=n.n(c),d=n(659),u=n.n(d),l=n(56),m=n.n(l),f=n(540),h=n.n(f),v=n(113),y=n.n(v),_=n(208),g={};g.styleTagTransform=y(),g.setAttributes=m(),g.insert=u().bind(null,"head"),g.domAPI=p(),g.insertStyleElement=h(),s()(_.A,g),_.A&&_.A.locals&&_.A.locals,async function(){try{const t=await fetch("https://api.weatherapi.com/v1/forecast.json?key=bb11d44ee4eb4fbda5504617242603&q=Chicago&days=3");if(!t.ok)throw new Error(t.status);const n=await t.json();(function(t){const n=new r(t.condition.text,t.condition.icon,t.feelslike_f,t.gust_mph,t.humidity,t.last_updated,t.precip_in,t.temp_f,t.uv,t.vis_miles,t.wind_dir,t.wind_mph);n.addCurrentWeatherData(),function(t){console.log(t);const n=`Current Temp ${t.temp_f}°F`,r=t.last_updated.split(" ")[0],a=t.condition,i=t.icon,o=(t.precip_in,t.wind_dir),s=t.wind_mph,c=document.createElement("p");c.className="current-temp",c.innerText=n;const p=document.createElement("p");p.className="current-date",p.innerText=r;const d=document.createElement("p");d.className="current-condition",d.innerText=a;const u=document.createElement("img");u.src=i;const l=document.createElement("p");l.className="current-descrition",l.innerText=`Wind ${o} at ${s} mph.`,e.append(c),e.append(p),e.append(d),e.append(u),e.append(l);const m=document.createElement("div");m.className="current-details";const f=t.feelslike_f,h=t.humidity,v=t.uv,y=t.vis_miles,_=document.createElement("p");_.innerText=`Feels like\n${f}°F`;const g=document.createElement("p");g.innerText=`Humidity\n${h}`;const x=document.createElement("p");x.innerText=`UV index\n${v}`;const b=document.createElement("p");b.innerText=`Visibility\n${y} miles`,m.append(_),m.append(g),m.append(x),m.append(b),e.append(m)}(n)})(n.current),function(e){for(let n=0;n<e.forecastday.length;n++)t=e.forecastday[n],new i(t.date,t.day.avghumidity,t.day.avgtemp_f,t.day.avgvis_miles,t.day.condition.text,t.day.condition.icon,t.chance_rain,t.chance_snow,t.maxtemp_f,t.maxwind_mph,t.mintemp_f,t.totalprecip_in,t.totalsnow_cm,t.uv).addForecastWeatherData();var t}(n.forecast)}catch(e){console.log(e)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,